<Project Sdk="Microsoft.NET.Sdk.Web">

	<PropertyGroup>
		<TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
		<TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
		<SpaRoot>ClientApp\</SpaRoot>
		<DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
		<SpaProxyServerUrl>https://localhost:3000</SpaProxyServerUrl>
		<SpaProxyLaunchCommand>npm run dev</SpaProxyLaunchCommand>
		<UserSecretsId>9f2ed432-bd25-45cb-8672-8e9f2c6fb29e</UserSecretsId>
		<DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Foundatio.Extensions.Hosting" Version="10.6.0" />
		<PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="7.0.2" />
		<PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="7.0.2" />
		<PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore" Version="7.0.2" />
		<PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.17.2" />
		<PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
		<PackageReference Include="MinimalApis.Extensions" Version="0.10.1" />
		<PackageReference Include="Lamar.Microsoft.DependencyInjection" Version="10.0.1" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="7.0.2">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>

		<PackageReference Include="OpenTelemetry.Api" Version="1.4.0-rc.2" />
		<PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.4.0-rc.2" />
		<PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol.Logs" Version="1.4.0-rc.2" />
		<PackageReference Include="OpenTelemetry.Exporter.Console" Version="1.4.0-rc.2" />
		<PackageReference Include="OpenTelemetry.Exporter.Prometheus.AspNetCore" Version="1.4.0-rc.2" />
		<PackageReference Include="OpenTelemetry.Extensions.Hosting" Version="1.4.0-rc.2" />
		<PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.0.0-rc9.11" />
		<PackageReference Include="OpenTelemetry.Instrumentation.Http" Version="1.0.0-rc9.11" />
		<PackageReference Include="OpenTelemetry.Instrumentation.StackExchangeRedis" Version="1.0.0-rc9.7" />
		<PackageReference Include="OpenTelemetry.Instrumentation.SqlClient" Version="1.0.0-rc9.11" />
		<PackageReference Include="OpenTelemetry.Instrumentation.Runtime" Version="1.1.0-beta.2" />

		<PackageReference Include="WolverineFx.EntityFrameworkCore" Version="0.9.7" Condition="'$(ReferenceWolverineSource)' == '' OR '$(ReferenceWolverineSource)' == 'false'" />
		<ProjectReference Include="$(WolverineProjectsDir)src\Persistence\Wolverine.EntityFrameworkCore\Wolverine.EntityFrameworkCore.csproj" Condition="'$(ReferenceWolverineSource)' == 'true'" />

		<PackageReference Include="WolverineFx.SqlServer" Version="0.9.7" Condition="'$(ReferenceWolverineSource)' == '' OR '$(ReferenceWolverineSource)' == 'false'" />
		<ProjectReference Include="$(WolverineProjectsDir)src\Persistence\Wolverine.SqlServer\Wolverine.SqlServer.csproj" Condition="'$(ReferenceWolverineSource)' == 'true'" />

		<PackageReference Include="WolverineFx.RabbitMQ" Version="0.9.7" Condition="'$(ReferenceWolverineSource)' == '' OR '$(ReferenceWolverineSource)' == 'false'" />
		<ProjectReference Include="$(WolverineProjectsDir)src\Transports\Wolverine.RabbitMQ\Wolverine.RabbitMQ.csproj" Condition="'$(ReferenceWolverineSource)' == 'true'" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\ConcordServicing.CSS\ConcordServicing.CSS.csproj" />
		<ProjectReference Include="..\ConcordServicing.Data\ConcordServicing.Data.csproj" />
	</ItemGroup>

	<ItemGroup>
		<!-- Don't publish the SPA source files, but do show them in the project files list -->
		<Content Remove="$(SpaRoot)**" />
		<None Remove="$(SpaRoot)**" />
		<None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
	</ItemGroup>

	<Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
		<!-- Ensure Node.js is installed -->
		<Exec Command="node --version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
		<Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
	</Target>

	<Target Name="PublishRunWebBuild" AfterTargets="ComputeFilesToPublish">
		<!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build" />

		<!-- Include the newly-built files in the publish output -->
		<ItemGroup>
			<DistFiles Include="$(SpaRoot)build\**" />
			<ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
				<RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
				<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>

</Project>
