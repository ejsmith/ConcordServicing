// <auto-generated/>
#pragma warning disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace Internal.Generated.WolverineHandlers
{
    // START: GetCustomerHandler417381204
    public class GetCustomerHandler417381204 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Microsoft.EntityFrameworkCore.DbContextOptions<ConcordServicing.Data.ConcordDbContext> _dbContextOptions;
        private readonly Microsoft.Extensions.Logging.ILogger<ConcordServicing.Data.Handlers.CustomerHandler> _logger;

        public GetCustomerHandler417381204(Microsoft.EntityFrameworkCore.DbContextOptions<ConcordServicing.Data.ConcordDbContext> dbContextOptions, Microsoft.Extensions.Logging.ILogger<ConcordServicing.Data.Handlers.CustomerHandler> logger)
        {
            _dbContextOptions = dbContextOptions;
            _logger = logger;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            var customerHandler = new ConcordServicing.Data.Handlers.CustomerHandler(_logger);
            await using var concordDbContext = new ConcordServicing.Data.ConcordDbContext(_dbContextOptions);
            var getCustomer = (ConcordServicing.Data.Messages.GetCustomer)context.Envelope.Message;
            var outgoing1 = await customerHandler.Handle(getCustomer, concordDbContext).ConfigureAwait(false);
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

        }

    }

    // END: GetCustomerHandler417381204
    
    
}

